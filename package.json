{
  "name": "se-lab-project",
  "version": "1.0.0",
  "description": "Petrolium \r Problem Statement:\r A petrol filling station is facing numerous operational challenges that \r hinder its efficiency, customer satisfaction, and profitability. The \r station's manual processes and outdated systems have led to various \r issues, including long wait times, inaccurate inventory management, and \r difficulty in monitoring equipment maintenance. Additionally, the \r station struggles to adapt to changing regulatory requirements and lacks \r effective data analysis tools for informed decision-making.\r Functional Requirements:\r User Registration: The user can create an account for himself and for the\r workers.\r User Authentication: The system must have secure user authentication \r for station employees and management with role-based access control.\r Inventory Tracking: The software should track fuel product inventory in \r real-time, including Liters, type, and current stock levels. It should \r provide automated alerts for low inventory levels to prevent stockouts.\r Payment Processing: Calculate and display transaction totals, taxes, and \r discounts, daily, weekly, and Monthly reports should also be generated.\r Customer Loyalty Program: Implement a customer loyalty program that \r rewards the customers having Orders more than a selected fixed amount.\r Fuel Pricing Management: This allows management to set and update \r fuel prices easily, with the option for automated price adjustments based \r on market conditions.\r Fuel Supplier Integration: Integrate with fuel suppliers to automate \r orders, deliveries, and invoice generation.\r Reporting and Analytics: Provide a range of reports and analytics tools \r for tracking sales, inventory, and profit margins.\r Regular Customer Database: Maintain a customer database for those \r who are regular and have big orders, so we can add them to the database \r and make them with contact information, transaction history, and loyalty \r program details.\r Backup and Data Recovery: Implement regular data backups and a \r robust data recovery mechanism to prevent data loss in case of system \r failures.\r Salary Functionality: Let admin define everyone's salary make a receipt\r for everyone for salary and send a message on their phone number that \r they have given salary for the respective month.\r Expense report: There should be an expense report including electricity \r expenditures, guest expenses, and other food expenses, There should be \r a portal or page in which we can add all these expenses.\r NON-Functional Requirements:\r Response Time: Specify acceptable response times for critical \r operations (e.g., fuel dispensing, and payment processing) to ensure \r efficient user interactions.\r Data Encryption: Define encryption requirements for sensitive data, such \r as payment information and customer records.\r Access Control: Specify user authentication and authorization \r mechanisms, ensuring that only authorized personnel can access \r sensitive functions.",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC"
}
